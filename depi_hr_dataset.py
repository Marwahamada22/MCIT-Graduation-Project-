# -*- coding: utf-8 -*-
"""DEPI HR DATASET

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QbT0C4b8b1MA0whL46CrjbgpwI1_tVuy
"""

from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">         DEPI HR Project       </span>')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, recall_score, precision_score, classification_report
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df_ed=pd.read_csv('EducationLevel.csv')
df_ed

df_ed.info()

df_ed['EducationLevel']=df_ed['EducationLevel'].astype('category')

df_ed.info()

from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">       End EducationLevel.csv     </span>')

df_em=pd.read_csv('Employee.csv')
df_em

#Start Data employee analysis

df_em.isnull().sum()

df_em.info()

df_em.head(1)

df_em.describe()

df_em['Gender'] = df_em['Gender'].replace(['Non-Binary', 'Prefer Not To Say'], 'Other')

for col in df_em.select_dtypes(include=['object']).columns:
    df_em[col] = df_em[col].astype('category')

df_em['HireDate'] = pd.to_datetime(df_em['HireDate'], errors='coerce')

df_em.rename(columns={'DistanceFromHome (KM)': 'DistanceFromHome_KM'}, inplace=True)

df_em.info()

duplicates = df_em.duplicated()
print(duplicates.sum())

from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">         Data Visualization       </span>')

sns.countplot(x='Attrition', data=df_em)

plt.show()

sns.countplot(hue=df_em.Attrition,x=df_em.BusinessTravel)
plt.show

sns.countplot(hue=df_em.Attrition,x=df_em.Department)
plt.show

sns.countplot(x=df_em.Attrition,hue=df_em.EducationField)
plt.show

sns.countplot(hue=df_em.Attrition,x=df_em.OverTime)
plt.show

df_em.head(1)



sns.countplot(hue=df_em.Attrition,x=df_em.Salary)
plt.show

sns.histplot(df_em['Age'], bins=30, kde=True, color='blue')
plt.title('Age Distribution')
plt.show()

sns.histplot(df_em['Salary'], bins=30, kde=True, color='green')
plt.title('Salary Distribution')
plt.show()

plt.figure(figsize=(5,5))
sns.histplot(x=df_em['Age'], y=df_em['Salary'])
plt.title('2D Histogram Plot of Age vs Salary')
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

sns.boxplot(df_em['YearsAtCompany'], color='skyblue')
plt.title('Years At Company')
plt.show()

sns.boxplot(y=df_em['YearsSinceLastPromotion'], color='lightgreen')
plt.title('Years Since Last Promotion')
plt.show()

sns.countplot(x='Department', data=df_em, palette='viridis')
plt.xlabel('Department')
plt.ylabel('Count')
plt.title('Number of Employees by Department')
plt.show()

sns.countplot(x='Gender', data=df_em, palette={'Female': 'hotpink', 'Male': 'blue', 'Other': 'green'})
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Number of Employees by Gender')
plt.show()

plt.figure(figsize=(5,5))
sns.histplot(x=df_em['Gender'], y=df_em['Salary'])
plt.title('2D Histogram Plot of Age vs Salary')
plt.xlabel('Gender')
plt.ylabel('Salary')
plt.show()

plt.figure(figsize=(5,5))
sns.scatterplot(x='Age', y='Salary', data=df_em)
plt.title('Age vs Salary')
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

plt.figure(figsize=(5,5))
sns.scatterplot(x='Education', y='Salary', data=df_em)
plt.title('Education vs Salary')
plt.xlabel('Education')
plt.ylabel('Salary')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Salary', y='YearsAtCompany', data=df_em)
plt.title('Salary by YearsAtCompany')
plt.xlabel('Salary')
plt.ylabel('YearsAtCompany')
plt.show()

numerical_cols = ['Age', 'DistanceFromHome_KM', 'Salary', 'StockOptionLevel', 'Education','YearsAtCompany', 'YearsInMostRecentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']
sns.pairplot(df_em[numerical_cols],palette='coolwarm')
plt.suptitle('Pair Plot Numerical Features')
plt.show()

plt.figure(figsize=(10,8))
numerical_df = df_em[numerical_cols]
sns.heatmap(numerical_df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

numerical_df = df_em.select_dtypes(include=['int64', 'float64'])
skewness=numerical_df.skew()
print(skewness)

skew_columns = df_em.select_dtypes(include=['int64', 'float64']).columns
for col in skew_columns:
    df_em[col] = np.log1p(df_em[col])

"""##data after less skewness #




"""

umerical_df = df_em.select_dtypes(include=['int64', 'float64'])
skewness=numerical_df.skew()
print(skewness)

sns.boxplot(x=skewness)
plt.title('Box Plot ')
plt.show()

df_em.info()



numerical_cols = ['Age', 'DistanceFromHome_KM', 'Salary', 'StockOptionLevel', 'Education','YearsAtCompany', 'YearsInMostRecentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']

scaler=StandardScaler()
numerical_cols = ['Age', 'DistanceFromHome_KM', 'Salary', 'StockOptionLevel', 'Education','YearsAtCompany', 'YearsInMostRecentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']
df_em[numerical_cols] = scaler.fit_transform(df_em[numerical_cols])

#categorical_columns = df_em.select_dtypes(include=['category']).columns

#label_encoder = LabelEncoder()

#for col in categorical_columns:
    #df_em[col] = label_encoder.fit_transform(df_em[col])

#df_em



from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">         PerformanceRating.csv       </span>')

df_p=pd.read_csv('PerformanceRating.csv')
df_p

# Start PerformanceRating analysis

df_p.info()

df_p.isnull().sum()

df_p.describe()

for col in df_p.select_dtypes(include=['object']).columns:
    df_p[col] = df_p[col].astype('category')

df_p['ReviewDate'] = pd.to_datetime(df_p['ReviewDate'])

df_p.info()

duplicates = df_p.duplicated()
print(duplicates.sum())



sns.histplot(df_p['EnvironmentSatisfaction'], bins=10, kde=True, color='pink')
plt.title('Environment Satisfaction Distribution')

sns.histplot(df_p['JobSatisfaction'], bins=10, kde=True, color='hotpink')
plt.title('Job Satisfaction Distribution')

numerical_df = df_p.select_dtypes(include=['int64', 'float64'])
skewness_p=numerical_df.skew()
print(skewness_p)

sns.boxplot(x=skewness_p)
plt.title('Box Plot ')
plt.show()

plt.figure(figsize=(2,2))
sns.boxplot(x=df_p['EnvironmentSatisfaction'])
plt.title('Box Plot of Environment Satisfaction')
plt.show()

plt.figure(figsize=(3,3))
sns.boxplot(x=df_p['TrainingOpportunitiesTaken'])
plt.title('Box Plot of TrainingOpportunitiesTaken')
plt.show()

sns.histplot(df_p['TrainingOpportunitiesTaken'], kde=True, color='blue')
plt.title('TrainingOpportunitiesTaken Distribution')

sns.histplot(df_p['EnvironmentSatisfaction'], kde=True, color='blue')
plt.title('EnvironmentSatisfaction Distribution')

numerical_cols_p = ['EnvironmentSatisfaction', 'JobSatisfaction', 'TrainingOpportunitiesTaken','WorkLifeBalance']
sns.pairplot(df_p[numerical_cols_p],palette='coolwarm')
plt.suptitle('Pair Plot Numerical Features')
plt.show()

plt.figure(figsize=(5,5))
sns.histplot(x=df_p['SelfRating'], y=df_p['ManagerRating'])
plt.title('2D Histogram Plot of SelfRating vs ManagerRating')
plt.xlabel('SelfRating')
plt.ylabel('ManagerRating')
plt.show()

numerical_cols_p = ['EnvironmentSatisfaction', 'JobSatisfaction','RelationshipSatisfaction', 'TrainingOpportunitiesWithinYear',
'TrainingOpportunitiesTaken', 'WorkLifeBalance',  'SelfRating', 'ManagerRating']
numerical_features = df_p[numerical_cols_p]
plt.figure(figsize=(8,8))
sns.heatmap(numerical_features.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(3,3))
sns.histplot(df_p['ManagerRating'],  kde=True, color='green')
plt.title('ManagerRating Distribution')

plt.figure(figsize=(3,3))
sns.histplot(df_p['SelfRating'],  kde=True, color='green')
plt.title('SelfRating Distribution')

plt.figure(figsize=(3,3))
sns.histplot(df_p['JobSatisfaction'],  kde=True, color='green')
plt.title('JobSatisfaction Distribution')

plt.figure(figsize=(3,3))
sns.histplot(df_p['WorkLifeBalance'],  kde=True, color='blue')
plt.title('WorkLifeBalance Distribution')

plt.figure(figsize=(3,3))
sns.histplot(df_p['RelationshipSatisfaction'],  kde=True, color='blue')
plt.title('RelationshipSatisfaction Distribution')



from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">        RatingLevel.csv      </span>')

df_r=pd.read_csv('RatingLevel.csv')
df_r

df_r.info()

df_r['RatingLevel']=df_r['RatingLevel'].astype('category')

df_r.info()



from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">        SatisfiedLevel.csv     </span>')

df_s=pd.read_csv('SatisfiedLevel.csv')
df_s

df_s.info()

df_s['SatisfactionLevel']=df_s['SatisfactionLevel'].astype('category')

df_s.info()



from IPython.display import HTML

HTML('<span style="color: red;font-size: 40px;">      Concatenate The DataFrames         </span>')

df_ed.reset_index(drop=True, inplace=True)
df_r.reset_index(drop=True, inplace=True)
df_s.reset_index(drop=True, inplace=True)
combined_df2 = pd.concat([df_ed, df_r, df_s], axis=1)
combined_df2

combined_df2.to_excel('combined_data1.xlsx') # df_ed, df_r, df_s

combined_df2=pd.read_excel('combined_data1.xlsx')#df_ed, df_r, df_s
combined_df2

combined_df_horizontal = pd.merge(df_em, df_p, on='EmployeeID', how='inner')
print(combined_df_horizontal.info())

combined_df_horizontal

combined_df_horizontal.to_excel('combined_data2.xlsx') # df_em, df_p

plt.figure(figsize=(5,5))
sns.histplot(x='Age', y='JobSatisfaction', data=combined_df_horizontal )
plt.title('Age vs JobSatisfaction')
plt.xlabel('Age')
plt.ylabel('JobSatisfaction')
plt.show()

df_p['EmployeeID'].value_counts()

##week 3

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

X = combined_df_horizontal[['Age', 'Salary', 'JobSatisfaction', 'YearsAtCompany']]
y = combined_df_horizontal['Attrition'].apply(lambda x: 1 if x == 'Yes' else 0)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

"""##the distribution of job satisfaction over time.





"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.lineplot(data=combined_df_horizontal, x='HireDate', y='JobSatisfaction', estimator='mean')
plt.title('Average Job Satisfaction Over Time')
plt.xlabel('Hire Date')
plt.ylabel('Average Job Satisfaction')
plt.show()

"""##Age and Salary Analysis: Explain how age and salary relate to attrition, mentioning any patterns or anomalies.

"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Age', y='Salary', hue='Attrition', data=combined_df_horizontal, palette='viridis')
plt.title('Age vs. Salary Colored by Attrition')
plt.xlabel('Age')
plt.ylabel('Salary')
plt.grid()
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(data=combined_df_horizontal, x='Age', y='Attrition', estimator='mean')
plt.title('Attrition Rate by Age')
plt.xlabel('Age')
plt.ylabel('Attrition Rate')
plt.show()

